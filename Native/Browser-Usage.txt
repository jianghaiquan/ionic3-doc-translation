Using Native Plugins in the Browser
在浏览器中使用原生插件

Ionic Native comes with over 130 mobile Native SDK plugins that make it possible to build powerful Ionic apps that take full advantage of Native mobile SDKs on iOS, Android, and beyond.
IN 有超过130种集成移动设备的原生SDK的插件，凭着在IOS，Android等一系列平台集成了原生SDK的巨大优势，从而使得我们有能力去构建一个非常强大的功能齐全的ionic APP

Historically, it was difficult to test native functionality in the browser, requiring Ionic developers to test on a physical device or emulator, a rather slow process.
长久以来，在浏览器上测试原生的功能是非常困难的，因为需要IONIC 开发者在真机或者虚拟机上测试，这种测试方法是非常慢的。

Ionic Native 3.0 now allows developers to mock and use native plugins in the browser through a simple override mechanic, making it easy to provide testing data from a sensor, or to access a native-only API such as HealthKit.
现在，IN 3.0允许开发者们在浏览器上使用一个简单的重写机制来模仿或者使用原生插件，这个方法通过一个传感器可以很简单的实现数据测试的功能，或者获取只有原生才能调用的API接口，比如HealthKit.

This means that a large majority of an Ionic app can now be built entirely in the browser without deploying to device or emulator. A level of development speed unheard of in mobile.
这意味着几乎所有的ionic APP都可以完全的在浏览器上进行构建，不需要设备或者虚拟机，这真是前所未有，使人震撼的测试环境的升级（这个就牛逼了）

Mocking Plugins
模拟插件

To use an Ionic Native plugin in the browser and ionic serve session, you just need to extend the original plugin class and override the methods you’d like to mock.
为了使用上述这个插件，你只需要扩展你的初始插件类，然后重写你所需要模拟的方法。

Let’s try mocking the Camera plugin to return an image instead of using the native Camera which may not be available outside of a device context.
我们来模拟相机插件，来返回一张图片 来代替可能根本环境里就没有摄像头的原生相机

First import the Camera class in our src/app/app.module.ts file:
首先将camera类加入我们的 app.module.ts文件

//引入
import { Camera } from '@ionic-native/camera';

Then create a new class that extends the Camera class with a mock implementation:
然后使用模拟的执行，目的是新建一个新类来拓展camera；

class CameraMock extends Camera {
  getPicture(options) {

//返回一个base 64的图片
    return new Promise((resolve, reject) => {
      resolve("BASE_64_ENCODED_DATA_GOES_HERE");
    })
  }
}
Finally, override the previous Camera class in our providers for this module:
最后，在这个模块的provider上重写以前的camera 
providers: [
  { provide: Camera, useClass: CameraMock }
]

Here’s the full example:
完全例子

import { NgModule, ErrorHandler } from '@angular/core';
import { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';
import { MyApp } from './app.component';
import { HomePage } from '../pages/home/home';

//原
import { Camera } from '@ionic-native/camera';

//重写后的cameramock

class CameraMock extends Camera {
  getPicture(options) {
    return new Promise((resolve, reject) => {
      resolve("BASE_64_ENCODED_DATA_GOES_HERE");
    })
  }
}

//app.module.ts
@NgModule({
  declarations: [
    MyApp,
    HomePage
  ],
  imports: [
    IonicModule.forRoot(MyApp)
  ],
  bootstrap: [IonicApp],
  entryComponents: [
    MyApp,
    HomePage
  ],
  providers: [
    {provide: ErrorHandler, useClass: IonicErrorHandler},
    { provide: Camera, useClass: CameraMock }
  ]
})
export class AppModule {}

Where to go from here
综上所述

The Camera example above shows the pattern for overriding and mocking plugins. Pick any plugin available in Ionic Native 3.0 or above, import it, then provide a custom overriding provider which will be called instead of the native implementation.
相机的例子展现了一个重写和模拟插件的模板，所有的插件在3.0你都可以这么做->引入它，然后给他提供一个重写的方法去代替它，需要使用这个原生功能的时候调用你重写的那个就可以了。

In this provider, custom data can be provided for quick testing. Some ideas include returning test barcode data from BarcodeScanner.scan(), implementing a fake connection and data transfer system for a device using BluetoothSerial, or implement a finger print scanning flow for iOS and Android by overriding TouchID and AndroidFingerprintAuth.
使用这个方法之后，数据测试将更加快速，比如 使用条形码扫描功能返回条形码数据，使用蓝牙执行一个虚拟的链接和数据传输，使用touchid(AndroidFingerprintAuth.)来实现IOS(android)的指纹扫描,